
#VERSION 2

def parcoursbits(demarrage,decallage,Taille,Matlecture) :
    "demarrage:point de démarrage du parcours (TYP=2-liste)    decallage:1 si demarrage est sur la gauche, 2 si sur la droite     Taille: nombre de bits à lire    Matlecture:de travail (qui défini le sens de lecture)"

    Nbbits=0 #Initialisation du compteur de bit
    octet=""
    positionbit=demarrage #position du bit à extraire

    while Nbbits<Taille : #On extrait le bit tant qu'on en a pas assez, parcours des lignes

        for j in range(decallage) : #parcours de droit à gauche

            valeurbit = Matlecture[positionbit[0],positionbit[1]]

            if valeurbit<42 :
                octet+=str(valeurbit)
                Nbbits+=1
            positionbit[1]-=1 #décalage vers la gauche
        
        if Nbbits<Taille-1 :
            decallage=2
        else :
            decallage=1

        positionbit[0]-=1 #de bas en haut
        positionbit[1]+=2 #retour à la colonne

        if positionbit[0]<0 :
            Matlecture=Matlecture[::-1,:]
            positionbit=[Tailleversion-1,positionbit[1]-2]
    
    if decallage==1 :
        positionbit[1]-=2
        positionbit[0]+=1

    return [octet,positionbit,decallage,Matlecture]




#VERSION 3

def parcoursbits(demarrage,Taille,Matlecture) :
    "demarrage:point de démarrage du parcours (TYP=2-liste)     Taille: nombre de bits à lire    Matlecture:de travail (qui défini le sens de lecture)"

    Nbbits=0 #Initialisation du compteur de bit
    messagecode=""
    positionbit=demarrage #position du bit à extraire

    while Nbbits<Taille : #On extrait le bit tant qu'on en a pas assez, parcours des lignes

        for j in range(2) : #parcours de droite à gauche

            valeurbit = Matlecture[positionbit[0],positionbit[1]]

            if valeurbit<42 :
                messagecode+=str(valeurbit)
                Nbbits+=1
            positionbit[1]-=1 #décalage vers la gauche
        
        positionbit[0]-=1 #de bas en haut
        positionbit[1]+=2 #retour à la colonne

        if positionbit[0]<0 :
            Matlecture=Matlecture[::-1,:]  #Parcous en sens inverse
            positionbit=[Tailleversion-1,positionbit[1]-2]


    return [messagecode,positionbit,Matlecture]

