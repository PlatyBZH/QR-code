"""
Projet info: Lecture d'un QR Code
Auteurs: Huitorel Camille, Moreau Annaëlle, Réauté Arthur
Date:
"""

#----------------Importations-----------------------
from scipy import misc
import matplotlib.pyplot as plt
import numpy as np
import os

#os.chdir("C:\\Users\prigepp\Documents\Prépa\_Informatique\Projet Info-QR code\Images")


RefMasque = {  0 :lambda i,j: (i+j)%2 == 0,  1 :lambda i,j: i%2 == 0,  2 :lambda i,j: j%3 == 0,  3 :lambda i,j: (i+j)%3 == 0,  4 :lambda i,j: (i/2+j/3)%2 == 0,  5 :lambda i,j: (i*j)%2+(i*j)%3 == 0,  6 :lambda i,j: ((i*j)%3+i*j)%2 == 0,  7 :lambda i,j: ((i*j)%3+i+j)%2== 0}  #Références des masques
Align = #A RECUPERER SUR ORDI ARTHUR

img=misc.imread("QR du pif.png")



#-----------Traitement de l'image-------------------


#Contraste
for i in range(img.shape[0]) :
    for j in range(img.shape[1]) :
        for k in range(3) :
            if img[i,j,k]>150 :
                img[i,j,k]=255
            else :
                img[i,j,k]=0


#Rognage
for i in range(img.shape[0]) : #parcours de toutes les lignes
    j=0 #compteur des colonnes
    pix=img[i,j,0]
    preN,derN=0,0
    while j<img.shape[1] and preN==0 :
        if img[i,j,0]==0 :
            preN=[i,j]
        j+=1
    while j<img.shape[1] :
        if img[i,j,0]==0 :
            derN=[i,j]
        j+=1
    if derN!=0 :
        break

lenQR=derN[1]-preN[1]+1

QRrogne=img[preN[0]:preN[0]+lenQR,preN[1]:derN[1]+1,:]



#évaluation de la taille en pixel des carrés
j=0
while QRrogne[0,j,0]==0 : #parcours des colonnes
  j+=1
  premB=j#colonne du premier pixel blanc
taillecarre=premB//7#taille d'un carré en pixel

#Détermination de la version
Version=int(((np.shape(QRrogne)[0]/taillecarre-2*8)-1)//4) #longueur du timing pattern -1(car impair) divisé par 4 (http://www-igm.univ-mlv.fr/~dr/XPOSE2011/QRCode/description.html)        Doit être un entier

Tailleversion=Version*4+17 #Taille du QR code



#-----------------Traitement Matriciel-----------------


#Création de la matrice QR
MatQR=np.zeros([Tailleversion,Tailleversion],dtype='int') #Création d'une matrice en carré à remplir, en forçant le type des données en nombres entiers
for i in range(Tailleversion) :
    for j in range(Tailleversion) :
        if QRrogne[taillecarre*i,taillecarre*j,0]==0 :
            MatQR[i,j]+=1



#Protection des zones non masquées : MatQRsecure
MatQRsecure=np.copy(MatQR)
for i in range(9) :  #protection des 3 finder patterns
    for j in range(9) :
        MatQRsecure[i,j]+=42 #en haut à gauche
    for j in range(8) :
        MatQRsecure[(Tailleversion)-8+j,i]+=42 #en haut à droite
        MatQRsecure[i,(Tailleversion)-8+j]+=42 #en bas à gauche
for k in range(4*Version) : #protection des 2 timing patterns
    MatQRsecure[6,9+k]+=42 #horizontal
    MatQRsecure[9+k,6]+=42 #vertical
ListePosAlign=[]
for i in Align[Version] : #liste des positions des centres des aligment patterns
    for j in Align[Version] :
        ListePosAlign.append([i,j])
for PosCentral in ListePosAlign : #protection des alignment patterns
    for i in range(-1,2) :
        for j in range(-1,2) :
            MatQRsecure[PosCentral[0]+i,PosCentral[1]+j]+=42

#Demasquage
FormatMasque=str(int(MatQR[8,4]))+str(int(MatQR[8,3]))+str(int(MatQR[8,2]))
NumMasque=int(FormatMasque,2)

def inverse(x) :
    return int(x==0)

MatQRdemask=np.copy(MatQRsecure)
for i in range (Tailleversion) :
    for j in range (Tailleversion) :
        if MatQRsecure[i,j]<42 :
            if RefMasque[NumMasque](i,j) :
                MatQRdemask[i,j]=inverse(MatQRdemask[i,j])



#Fonction du parcours matriciel
def parcoursbits(demarrage,Taille,Matlecture) :
    "demarrage:point de démarrage du parcours (TYP=2-liste)       Taille: nombre de bits à lire    Matlecture:de travail (qui défini le sens de lecture)"
    Nbbits=0 #Initialisation du compteur de bit
    octet=""
    positionbit=demarrage #position du bit à extraire
    while Nbbits<Taille : #On extrait le bit tant qu'on en a pas assez, parcours des lignes
        for j in range(2) : #parcours de droit à gauche
            valeurbit = Matlecture[positionbit[0],positionbit[1]]
            if valeurbit<42 :
                octet+=str(valeurbit)
                Nbbits+=1
            positionbit[1]-=1 #décalage vers la gauche
        positionbit[0]-=1 #de bas en haut
        positionbit[1]+=2 #retour à la colonne
        if positionbit[0]<0 :
            Matlecture=Matlecture[::-1,:]
            positionbit=[Tailleversion-1,positionbit[1]-2]
    return [octet,positionbit,Matlecture]


#Détermination du type de données (ENC) et du la longueur du message (Length)

demarrage=[Tailleversion-1,Tailleversion-1] #position de départ pour lire Enc
Matlecture=MatQRdemask[:] #Matrice de travail au départ : la matrice démasquée
Enc=parcoursbits(demarrage,4,Matlecture)[0] #Pour détecter le type de données
#Il faudrait encore traiter le ENC, ici on se place en codage "bytes", soit en 8 bits
demarrage=[Tailleversion-3,Tailleversion-1] #position de départ pour lire Length
resultat=parcoursbits(demarrage,8,Matlecture) #Résultat de la fonction parcoursbits
Length=int(resultat[0],2) #Donne la longueur du message
prembit=resultat[1] #Donne la position du prochain bit à lire
Listeoctet=[] #Inititalisation de la liste des octets


#Lecture du message à proprement dit

for l in range(Length) : 
    resultat=parcoursbits(prembit,8,Matlecture)
    Listeoctet.append(resultat[0])
    prembit=resultat[1]
    Matlecture=resultat[2]

message=""
for letter in Listeoctet :
    message+=str(chr(int(letter,2))) #chr permet de donner la correspoandance dans la table ASCII inscrite dans Python

print(message)


#
